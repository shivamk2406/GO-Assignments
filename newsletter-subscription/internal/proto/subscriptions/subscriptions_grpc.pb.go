// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: subscriptions.proto

package newsletter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionManagementServiceClient is the client API for SubscriptionManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionManagementServiceClient interface {
	GetSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Plan, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*Plans, error)
}

type subscriptionManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionManagementServiceClient(cc grpc.ClientConnInterface) SubscriptionManagementServiceClient {
	return &subscriptionManagementServiceClient{cc}
}

func (c *subscriptionManagementServiceClient) GetSubscription(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (*Plan, error) {
	out := new(Plan)
	err := c.cc.Invoke(ctx, "/proto.subscriptions.SubscriptionManagementService/GetSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionManagementServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, "/proto.subscriptions.SubscriptionManagementService/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionManagementServiceClient) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*Plans, error) {
	out := new(Plans)
	err := c.cc.Invoke(ctx, "/proto.subscriptions.SubscriptionManagementService/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionManagementServiceServer is the server API for SubscriptionManagementService service.
// All implementations must embed UnimplementedSubscriptionManagementServiceServer
// for forward compatibility
type SubscriptionManagementServiceServer interface {
	GetSubscription(context.Context, *SubscriptionRequest) (*Plan, error)
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*SubscriptionResponse, error)
	ListPlans(context.Context, *ListPlansRequest) (*Plans, error)
	mustEmbedUnimplementedSubscriptionManagementServiceServer()
}

// UnimplementedSubscriptionManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionManagementServiceServer struct {
}

func (UnimplementedSubscriptionManagementServiceServer) GetSubscription(context.Context, *SubscriptionRequest) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedSubscriptionManagementServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedSubscriptionManagementServiceServer) ListPlans(context.Context, *ListPlansRequest) (*Plans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedSubscriptionManagementServiceServer) mustEmbedUnimplementedSubscriptionManagementServiceServer() {
}

// UnsafeSubscriptionManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionManagementServiceServer will
// result in compilation errors.
type UnsafeSubscriptionManagementServiceServer interface {
	mustEmbedUnimplementedSubscriptionManagementServiceServer()
}

func RegisterSubscriptionManagementServiceServer(s grpc.ServiceRegistrar, srv SubscriptionManagementServiceServer) {
	s.RegisterService(&SubscriptionManagementService_ServiceDesc, srv)
}

func _SubscriptionManagementService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionManagementServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.subscriptions.SubscriptionManagementService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionManagementServiceServer).GetSubscription(ctx, req.(*SubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionManagementService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionManagementServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.subscriptions.SubscriptionManagementService/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionManagementServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionManagementService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionManagementServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.subscriptions.SubscriptionManagementService/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionManagementServiceServer).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionManagementService_ServiceDesc is the grpc.ServiceDesc for SubscriptionManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.subscriptions.SubscriptionManagementService",
	HandlerType: (*SubscriptionManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscription",
			Handler:    _SubscriptionManagementService_GetSubscription_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _SubscriptionManagementService_CreateSubscription_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _SubscriptionManagementService_ListPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriptions.proto",
}
