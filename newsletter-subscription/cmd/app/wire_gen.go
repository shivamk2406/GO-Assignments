// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/go-kit/log"
	"github.com/shivamk2406/newsletter-subscriptions/internal/config"
	"github.com/shivamk2406/newsletter-subscriptions/internal/kproducer"
	"github.com/shivamk2406/newsletter-subscriptions/internal/service"
	mail2 "github.com/shivamk2406/newsletter-subscriptions/internal/service/mail"
	"github.com/shivamk2406/newsletter-subscriptions/internal/service/news"
	"github.com/shivamk2406/newsletter-subscriptions/internal/service/subscription"
	"github.com/shivamk2406/newsletter-subscriptions/internal/service/user"
	"github.com/shivamk2406/newsletter-subscriptions/pkg/database"
	"github.com/shivamk2406/newsletter-subscriptions/pkg/kafka/producer"
	"github.com/shivamk2406/newsletter-subscriptions/pkg/mail"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeConfig() (config.Config, error) {
	configConfig, err := config.LoadDatabaseConfig()
	if err != nil {
		return config.Config{}, err
	}
	return configConfig, nil
}

func initializeDB(conf config.Config) (*gorm.DB, func(), error) {
	db, cleanup, err := database.Open(conf)
	if err != nil {
		return nil, nil, err
	}
	return db, func() {
		cleanup()
	}, nil
}

func initializeActiveUserProducer() kproducer.UserProducer {
	producerConfig := config.LoadProducerConfig()
	producerProducer := producer.NewProducer(producerConfig)
	userProducer := kproducer.NewUserProducer(producerProducer)
	return userProducer
}

func initializeRegistry(ctx context.Context, db *gorm.DB, log2 log.Logger) *service.Registry {
	subscriptionDB := subscriptions.NewSubscriptionRepo(db)
	subscriptionManagement := subscriptions.NewSubscriptionService(subscriptionDB, log2)
	newsDB := news.NewNewsRepo(db)
	newsManagement := news.NewsManagementService(newsDB, log2)
	usersDB := users.NewUserRepo(db)
	userProducer := initializeActiveUserProducer()
	userManagement := users.UserManagementService(usersDB, log2, userProducer)
	mailConfig := config.LoadMailService()
	dialer := mail.NewMailConn(mailConfig)
	mailService := mail2.NewMailService(dialer)
	registry := service.ServiceRegistry(subscriptionManagement, newsManagement, userManagement, mailService)
	return registry
}
