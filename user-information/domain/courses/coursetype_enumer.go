// Code generated by "enumer -type=CourseType enum.go"; DO NOT EDIT.

//
package courses

import (
	"fmt"
)

const _CourseTypeName = "abcdef"

var _CourseTypeIndex = [...]uint8{0, 1, 2, 3, 4, 5, 6}

func (i CourseType) String() string {
	if i < 0 || i >= CourseType(len(_CourseTypeIndex)-1) {
		return fmt.Sprintf("CourseType(%d)", i)
	}
	return _CourseTypeName[_CourseTypeIndex[i]:_CourseTypeIndex[i+1]]
}

var _CourseTypeValues = []CourseType{0, 1, 2, 3, 4, 5}

var _CourseTypeNameToValueMap = map[string]CourseType{
	_CourseTypeName[0:1]: 0,
	_CourseTypeName[1:2]: 1,
	_CourseTypeName[2:3]: 2,
	_CourseTypeName[3:4]: 3,
	_CourseTypeName[4:5]: 4,
	_CourseTypeName[5:6]: 5,
}

// CourseTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CourseTypeString(s string) (CourseType, error) {
	if val, ok := _CourseTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CourseType values", s)
}

// CourseTypeValues returns all values of the enum
func CourseTypeValues() []CourseType {
	return _CourseTypeValues
}

// IsACourseType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CourseType) IsACourseType() bool {
	for _, v := range _CourseTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
