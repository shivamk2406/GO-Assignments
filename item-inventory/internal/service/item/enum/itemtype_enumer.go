// Code generated by "enumer -type=ItemType"; DO NOT EDIT.

//
package enum

import (
	"fmt"
)

const _ItemTypeName = "rawmanufacturedimported"

var _ItemTypeIndex = [...]uint8{0, 3, 15, 23}

func (i ItemType) String() string {
	if i < 0 || i >= ItemType(len(_ItemTypeIndex)-1) {
		return fmt.Sprintf("ItemType(%d)", i)
	}
	return _ItemTypeName[_ItemTypeIndex[i]:_ItemTypeIndex[i+1]]
}

var _ItemTypeValues = []ItemType{0, 1, 2}

var _ItemTypeNameToValueMap = map[string]ItemType{
	_ItemTypeName[0:3]:   0,
	_ItemTypeName[3:15]:  1,
	_ItemTypeName[15:23]: 2,
}

// ItemTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ItemTypeString(s string) (ItemType, error) {
	if val, ok := _ItemTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ItemType values", s)
}

// ItemTypeValues returns all values of the enum
func ItemTypeValues() []ItemType {
	return _ItemTypeValues
}

// IsAItemType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ItemType) IsAItemType() bool {
	for _, v := range _ItemTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
