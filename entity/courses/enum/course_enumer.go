// Code generated by "enumer -type=Course"; DO NOT EDIT.

//
package enum

import (
	"fmt"
)

const _CourseName = "abcdef"

var _CourseIndex = [...]uint8{0, 1, 2, 3, 4, 5, 6}

func (i Course) String() string {
	if i < 0 || i >= Course(len(_CourseIndex)-1) {
		return fmt.Sprintf("Course(%d)", i)
	}
	return _CourseName[_CourseIndex[i]:_CourseIndex[i+1]]
}

var _CourseValues = []Course{0, 1, 2, 3, 4, 5}

var _CourseNameToValueMap = map[string]Course{
	_CourseName[0:1]: 0,
	_CourseName[1:2]: 1,
	_CourseName[2:3]: 2,
	_CourseName[3:4]: 3,
	_CourseName[4:5]: 4,
	_CourseName[5:6]: 5,
}

// CourseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CourseString(s string) (Course, error) {
	if val, ok := _CourseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Course values", s)
}

// CourseValues returns all values of the enum
func CourseValues() []Course {
	return _CourseValues
}

// IsACourse returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Course) IsACourse() bool {
	for _, v := range _CourseValues {
		if i == v {
			return true
		}
	}
	return false
}
